<?php
    namespace {{ private_namespace }};

{% if date_added or date_updated %}
    use DateTime;
    use Exception;

{% endif %}
    use Enobrev\ORM\Exceptions\DbException;
    use Enobrev\ORM\Field;
    use Enobrev\ORM\Table;
{% if has_date %}
    use Enobrev\ORM\ModifiedDateColumn;
    use Enobrev\ORM\ModifiedDate;
{% endif %}
{% if has_owner %}
    use Enobrev\ORM\OwnerColumn;
    use Enobrev\ORM\Owner;
{% endif %}

    use {{ public_namespace }} as PublicNS;

    abstract class {{table.title}} extends Table {% if interfaces %}implements {{ interfaces|join(', ') }} {% endif %}{
{% if has_date or has_owner %}
{% if has_date %}
        use ModifiedDate;
{% endif %}
{% if has_owner %}
        use Owner;
{% endif %}

{% endif %}
        protected string $sTitle = '{{table.name}}';

{% for field in fields %}
{% if field.type == 'Field\\Enum' %}
{% for value in field.values %}
        public const {{value.const_padded}}= '{{value.name}}';
{% endfor %}
        public const {{field.enum_const}} = [{% for value in field.values %}PublicNS\{{ table.title }}::{{value.const}}{% if not loop.last %}, {% endif %}{% endfor %}];

{% endif %}
{% endfor %}
{% for field in fields %}
{% if field.field.reference.field.type == "Field\Id" %}
        /** @var {{field.reference.field.type}} */
{% else %}
        /** @var {{field.type}} */
{% endif %}
        public ${{ field.name }};

{% endfor %}

        protected function init():void {
{% if primary %}
{% for field in primary %}
{% if field.type == 'Field\\Enum' %}
            $this->addPrimary(new {{field.type}}('{{field.name}}', PublicNS\{{ table.title }}::{{field.enum_const}}));
{% else %}
            $this->addPrimary(new {{field.type}}('{{field.name}}'));
{% endif %}
{% endfor %}
{% endif %}

            $this->addFields(
{% for field in fields %}
{% if field.primary == false %}
{% if field.type == 'Field\\Enum' %}
                new {{field.type}}('{{field.name}}', PublicNS\{{ table.title }}::{{field.enum_const}}){% if not loop.last %},{% endif %}

{% else %}
                new {{field.type}}('{{field.name}}'){% if not loop.last %},{% endif %}

{% endif %}
{% endif %}
{% endfor %}
            );

{% for field in fields %}
{% if field.generated %}
            $this->{{field.name}}->setGenerated(true);
{% endif %}
{% endfor %}
{% for field in fields %}
{% if field.default is not empty %}
            $this->{{field.name}}->setDefault({{field.default|replace({'self': ('PublicNS\\' ~ table.title)})|raw}});
{% endif %}
{% endfor %}
{% if count.outbound %}

{% for field in fields %}
{% if field.reference %}
            $this->{{field.name}}->references('{{ field.reference.table.name}}', '{{ field.reference.field.name }}');
{% endif %}
{% endfor %}
{% endif %}
        }

        public static function getTables(): PublicNS\{{table.plural}} {
            return new PublicNS\{{table.plural}};
        }

{% if primary %}
        /**
{% for field in primary %}
         * @param {{ field.php_type }}|{{ field.type }}|PublicNS\{{table.title}} ${{field.var}}
{% endfor %}

         * @return PublicNS\{{table.title}}|null
         * @throws DbException
         */
        public static function getById({% for field in primary %}${{field.var}}{% if not loop.last %}, {% endif %}{% endfor %}): ?PublicNS\{{table.title}} {
            $oTable = new PublicNS\{{ table.title }};
            return PublicNS\{{ table.title }}::getBy(
{% for field in primary %}
{% if loop.last %}
                $oTable->{{field.name}}->setValue(${{field.var}})
{% else %}
                $oTable->{{field.name}}->setValue(${{field.var}}),
{% endif %}
{% endfor %}
            );
        }
{% endif %}
{% if unique %}
{% for field in unique %}

        /**
         * @param {{ field.php_type }}|{{ field.type }}|PublicNS\{{table.title}} ${{field.var}}
         * @return PublicNS\{{table.title}}|null
         * @throws DbException
         */
        public static function getBy{{field.short_title}}(${{field.var}}): ?PublicNS\{{table.title}} {
            $oTable = new PublicNS\{{ table.title }};
            return PublicNS\{{ table.title }}::getBy(
                $oTable->{{field.name}}->setValue(${{field.var}})
            );
        }
{% endfor %}
{% endif %}
{% if count.boolean %}
{% for field in fields %}
{% if field.boolean %}

        public function is{{ field.short_title }}(): bool {
            return $this->{{ field.name }}->isTrue();
        }
{% endif %}
{% endfor %}
{% endif %}
{% set owned = false %}
{% if count.inbound %}
{% for field in fields %}
{% if field.primary and count.primary == 1 and field.name == 'user_id' %}
{% set owned = true %}

        /**
         * @return PublicNS\{{ table.title }}
         */
        public function getOwnerTable() {
            return PublicNS\{{ table.title }}::class;
        }

        public function getOwnerField(): Field {
            return $this->user_id;
        }

        public function hasOwner(Table $oOwner): bool {
            return $this->user_id->is($oOwner);
        }

        /**
         * @throws DbException
         */
        public function getOwner(): ?Table {
            return PublicNS\{{ table.title }}::getById($this->user_id);
        }
{% endif %}
{% endfor %}
{% endif %}
{% if count.outbound %}
{% for field in fields %}
{% if field.reference %}
{% if field.reference.table.title == 'User' and table.title != 'User' and field.name == 'user_id' %}
{% if owned == false %}

        /**
         * @return PublicNS\{{ field.reference.title }}
         */
        public function getOwnerTable() {
            return PublicNS\{{ field.reference.title }}::class;
        }

        public function getOwnerField(): Field {
            return $this->user_id;
        }

        public function hasOwner(Table $oOwner): bool {
            return $this->user_id->is($oOwner);
        }

        /**
         * @throws DbException
         */
        public function getOwner(): ?PublicNS\User {
            return PublicNS\User::getById($this->user_id);
        }
{% endif %}{# end owned #}
{% else %}

        /**
         * @throws DbException
         */
        public function get{{field.reference.title}}(): ?PublicNS\{{field.reference.table.title}} {
            return $this->{{field.name}}->hasValue()
                 ? PublicNS\{{field.reference.table.title}}::getById($this->{{field.name}}->getValue())
                 : null;
        }

        public function has{{field.reference.title}}(?PublicNS\{{field.reference.table.title}} $o{{field.reference.title}} = null): bool {
            return $o{{field.reference.title}} instanceof PublicNS\{{field.reference.table.title}}
                && $this->{{field.name}}->is($o{{field.reference.title}});
        }
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% if date_added or date_updated %}

        /**
         * @throws DbException
         * @throws Exception
         */
        protected function preInsert():void {
{% if primary %}
{% for field in primary %}
{% if field.type == 'Field\\UUID' or field.type == 'Field\\UUIDNullable' %}
            if ($this->{{field.name}}->isNull()) {
                $this->{{field.name}}->generateValue();
            }
{% endif %}
{% endfor %}
{% endif %}
{% if date_added %}
            $this->{{date_added.name}}->setValue($this->now());
{% endif %}
{% if date_updated %}
            $this->{{date_updated.name}}->setValue($this->now());
{% endif %}
        }

        /**
         * @throws DbException
         * @throws Exception
         */
        protected function preUpsert():void {
{% if primary %}
{% for field in primary %}
{% if field.type == 'Field\\UUID' or field.type == 'Field\\UUIDNullable' %}
            if ($this->{{field.name}}->isNull()) {
                $this->{{field.name}}->generateValue();
            }
{% endif %}
{% endfor %}
{% endif %}
{% if date_added %}
            $this->{{date_added.name}}->setValue($this->now());
{% endif %}
{% if date_updated %}
            $this->{{date_updated.name}}->setValue($this->now());
{% endif %}
        }
{% if date_updated %}

        /**
         * @throws DbException
         * @throws Exception
         */
        protected function preUpdate():void {
{% if date_updated %}
            if ($this->{{date_updated.name}}->hasValue() === false || $this->changed()) {
                $this->{{date_updated.name}}->setValue($this->now());
            }
{% endif %}
        }
{% endif %}
{% endif %}
{% if date_updated %}

        public function getModifiedDateField(): Field\DateTime {
            return $this->{{date_updated.name}};
        }
{% elseif date_added %}

        public function getModifiedDateField(): Field\DateTime {
            return $this->{{date_added.name}};
        }
{% endif %}
{% if date_added or date_updated %}

        /**
         * @throws Exception
         */
        public function getLastModified(): DateTime {
            return $this->getModifiedDateField()->getValue();
        }
{% endif %}
    }